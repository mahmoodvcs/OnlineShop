@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "فروشنده ها";
    Layout = "~/Views/Shared/_Staff.cshtml";
}


@(
        Html.Kendo()
        .Grid<MahtaKala.Entities.Seller>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Name);
        columns.Bound(p => p.AccountNumber);
        columns.Bound(p => p.UserId).ClientTemplate("#= User ? User.Username : '' #").EditorTemplateName("User");
        columns.Bound(p => p.Basket);
        columns.Bound(p => p.Address);
        columns.Bound(p => p.PhoneNumber);
        columns.Bound(p => p.Lng);
        columns.Bound(p => p.Lat);
        columns.Command(command =>
        {
            command.Edit().Text("ویرایش");
            command.Destroy().Text("حذف");
        }).Width(200);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create().Text("مورد جدید");
    })
    .Groupable()
    .Sortable()
    .Filterable()
    .Editable( GridEditMode.InLine)
    .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .PageSizes(new int[] { 5, 10, 20, 50 })
        .ButtonCount(5)
    ).DataSource(dataSource => dataSource
        .Ajax()
        .Model(model =>
        {
            model.Id(p => p.Id);
            //model.Field(p => p.Id).Editable(false);
            //model.Field(p => p.User).DefaultValue(ViewData["defaultUser"] as MahtaKala.Entities.User);
        })
        .Read(read => read.Action("GetAllSellers", "Staff"))
        .Update(up => up.Action("UpdateSeller", "Staff"))
        .Destroy(de => de.Action("RemoveSeller", "Staff"))
        .Create(de => de.Action("UpdateSeller", "Staff"))

        .PageSize(10)
    )
)

<script type="text/javascript">

    //register custom validation rules
    $(document).ready(function () {
        $.extend(true, kendo.ui.validator, {
            rules: { // custom rules
                namevalidation: function (input, params) {
                    if (input.is("[name='Name']")) {
                        if (input.val() === "") {
                            input.attr("data-namevalidation-msg", "نام نباید خالی باشد.");
                            return false;
                        }
                    } else if (input.is("[name='AccountNumber']")) {
                        if (input.val() === "") {

                            input.attr("data-namevalidation-msg", "شماره حساب نباید خالی باشد.");
                            return false;
                        }
                        //input.attr("data-namevalidation-msg", "شماره حساب فقط باید شامل عدد و خط تیره باشد.");
                        //return /^(\d+-?)+\d+$/.test(input.val());
                    }

                    return true;
                }
            }
        });
    });

    //show server errors if any
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>