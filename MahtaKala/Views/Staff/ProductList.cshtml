@{
    ViewData["Title"] = ViewData["Title"];
    Layout = "~/Views/Shared/_Staff.cshtml";
    IGridBoundColumn[] gridColumns = null;
}
<div class="filterPanel">
    <fieldset>
        <legend>فیلتر ها:</legend>
        <div class="row">
            <div class="col-lg-3">
                <label>نام:</label>
                <input type="text" name="nameFilter" class="form-control additionalData" />
            </div>
            <div class="col-lg-3">
                <label>دسته بندی:</label>
                <input type="text" name="categoryFilter" class="form-control additionalData" />
            </div>
            <div class="col-lg-3">
                <label>تگ:</label>
                <input type="text" name="tagFilter" class="form-control additionalData" />
            </div>
            <div class="col-lg-3">
                <label>وضعیت</label>
                @(Html.EnumCombo<ProductStatus>("stateFilter", showEmptyValue: true, isGridAdditionalData: true))
            </div>
        </div>
    </fieldset>

</div>


@(Html.Kendo().Grid<MahtaKala.Entities.Models.ProductListModel>().Name("grid").Columns(columns =>
{
    columns.Select().Width(50);
    columns.Bound(p => p.Id).Title("شناسه");
    columns.Bound(p => p.Title).Title("نام");
    columns.Bound(p => p.Code).Title("کد محصول");
    columns.Bound(p => p.Categories).Title("دسته بندی").Filterable(false).Sortable(false);
    columns.Bound(p => p.Tags).Title("تگ ها").Filterable(false).Sortable(false);
    columns.Bound(p => p.Seller).Title("فروشنده");
    columns.Bound(p => p.Brand).Title("برند");
    columns.Bound(p => p.Price).Format("{0:n0}").Title("قیمت");
    columns.Bound(p => p.DiscountPrice).Format("{0:n0}").Title("قیمت با تخفیف");
    columns.Bound(p => p.Quantity).Title("موجودی").Format("{0:n0}").Filterable(false);
    columns.Bound(p => p.Status).Title("وضعیت").Filterable(false);
    columns.Bound(p => p.Published).ClientTemplate("#=Published?'بلی':'خیر'#").Title("منتشر شده");
    columns.Command(command => command.Custom("ویرایش").Click("EditQuestion")).Width(90);
    columns.Command(command => command.Custom("حذف").Click("RemoveQuestion")).Width(90);

    gridColumns = columns.ColumnsContainer.Columns.OfType<IGridBoundColumn>().ToArray();

})
    .ToolBar(toolbar =>
    {
        toolbar.ClientTemplateId("GridToolbarTemplate");
    })
    .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .PageSizes(new int[] { 5, 10, 20, 50 })
        .ButtonCount(5))
    .Filterable()
    .Sortable()
    .Selectable(c=>c.Mode(GridSelectionMode.Multiple))
    .Events(ev => ev.Change("onChange"))
    .PersistSelection()
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(50)
        .Model(model =>
        {
            model.Id(p => p.Id);

        })
        .Read(read => read.Action("Product_Read", "Staff").Data("getAdditionalData"))
        .Sort(s=>s.Add(a=>a.Id))
    ).Selectable()
     .Excel(excel => excel.FileName("Products.xlsx"))
         .Events(e => e.ExcelExport("onExcelExport"))

)
<script id="GridToolbarTemplate" type="text/x-kendo-template">
    <div class="refreshBtnContainer">
        <a href="##" onclick="window.open('@Url.Content("~/Staff/Product")'); return false;" class="k-pager-refresh k-link k-button">
            <span class="k-icon k-i-add"></span>
            جدید
        </a>
        <div class="btn-group">
            <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                عملیات گروهی
            </button>
            <div class="dropdown-menu">
                <a class="dropdown-item" href="##" onclick="moveToCategory()">انتقال به دسته</a>
                <a class="dropdown-item" href="##" onclick="assignTag()">تخصیص تگ</a>
            </div>
        </div>
        <div class="btn-group" id="columnSelection">
            <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                انتخاب ستون ها
            </button>
            <div class="dropdown-menu">
                @foreach (var c in gridColumns)
                {
                    <label>
                        <input type="checkbox" class="gridColumnCheckbox" name="gridColumns" value="@c.Member" checked="@(!c.Hidden)" />
                        @Html.Raw(c.Title)
                    </label>
                    <br />
                }
            </div>
        </div>
        <button type="button" class="btn btn-primary" onclick="exportToExcel(false);" @*data-toggle="modal" data-target="#exportModal"*@>
            <i class="fa fa-export"></i>
            خروجی اکسل (صفحه جاری)
        </button>
        <button type="button" class="btn btn-primary" onclick="exportToExcel(true);">
            <i class="fa fa-export"></i>
            خروجی اکسل (همه صفحات)
        </button>
        <button type="button" class="btn btn-warning" onclick="showIpmortDialog()">
            <i class="fa fa-import"></i>
            دریافت اطلاعات از فایل اکسل
        </button>
    </div>
</script>


<div class="modal fade" id="importModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <form action="@Url.Content("~/Staff/Products/Import")" method="post" enctype="multipart/form-data">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="file" name="excelFile" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">دریافت اطلاعات</button>
                </div>
            </div>
        </div>
    </form>
</div>


@section js{
    <script type="text/javascript">

        function showIpmortDialog() {
            $("#importModal").modal("show");
        }
        function exportToExcel(allPages){
            var g = $('#grid').data('kendoGrid');
            g.options.excel.allPages = allPages;
            g.saveAsExcel();
        }
        function onExcelExport(e) {
            e.workbook.rtl = true;
        }

        $(function () {
            $(document).on('click', '#columnSelection .dropdown-menu', function (e) {
                e.stopPropagation();
            });
            $("input.gridColumnCheckbox").click(function (ev) {
                var columns = {};
                $("input.gridColumnCheckbox").each(function (i, c) {
                    columns[c.value] = c.checked;
                });
                var name = this.value;
                columns[name] = this.kchecked;
                localStorage.setItem("products-grid-columns", JSON.stringify(columns));

                var grid = $("#grid").data("kendoGrid");
                if (this.checked)
                    grid.showColumn(name);
                else
                    grid.hideColumn(name);
            });


            var columnsValue = localStorage.getItem("products-grid-columns");
            if (columnsValue) {
                var columns = JSON.parse(columnsValue);
                var grid = $("#grid").data("kendoGrid");
                for (var c in columns) {
                    if (columns[c] === false) {
                        grid.hideColumn(c);
                        $("input.gridColumnCheckbox[value='" + c + "']").prop("checked", false);
                    }
                }
            }
        })


        var selectedRows = null;

        function EditQuestion(e) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var url = '@Url.Content("~/Staff/Product/")' + dataItem.Id;
            window.open(
                url,
                '_blank'
            );
        }

        function ShowItem(e) {
           e.preventDefault();
           var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var url = '@Url.Content("~/Staff/ProductItem/")' + dataItem.Id;
            window.open(
                url,
                '_blank'
            );
        }


        function RemoveQuestion(e) {
            e.preventDefault();
            var id = this.dataItem($(e.currentTarget).closest("tr")).Id;
            swal.fire({
                title: "از حذف این آیتم مطمئن هستید؟",
                text: "در صورتی که برای این آیتم رکوردی درج شده باشد حذف می شود و این کار غیر قابل بازگشت می باشد",
                type: "warning",
                showCancelButton: true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText: "بلی مطمئنم",
                cancelButtonText: "انصراف می دم",
                closeOnConfirm: false,
                closeOnCancel: true
            }).then(function (result) {
                if (result.value) {
                        $.ajax({
                            url: '@Url.Content("~/Staff/Product_Destroy/")' + id,
                            dataType: "json",
                            type: "POST",
                            contentType: 'application/json; charset=utf-8',
                            cache: false,
                            success: function (data) {

                                if (data.success) {
                                    var grid = $("#grid").data("kendoGrid");
                                    grid.dataSource.read();
                                    swal.fire("حذف رکورد با موفقیت انجام شد", "", "success");
                                }
                                else {
                                    swal.fire(data.message, "", "warning");
                                }
                            },
                            error: function (xhr) {
                                swal.fire("خطایی  در حذف اطلاعات اتفاق افتاده است", "", "warning");
                            }
                        });
                    }
                });
        }

        function onChange(arg) {
            selectedRows = this.selectedKeyNames();
        }

        function checkSelectedRows() {
            window.event.preventDefault();
            if (selectedRows == null || selectedRows.length == 0) {
                swal.fire("حداقل یک سطر را انتخاب کنید.", "", "warning");
                return false;
            }
            return true;
        }


        function assignTag(categories) {
            if (!checkSelectedRows())
                return;

            $.get('@Url.Content("~/Repo/Tags/")', function (data, status) {
                var tags = {}
                for (var i = 0; i < data.length; i++) {
                    tags[data[i].Id] = data[i].Name;
                }

                Swal.fire({
                    title: 'انتخاب تگ',
                    input: 'select',
                    inputOptions: {
                        tags
                    },
                    inputPlaceholder: 'انتخاب کنید',
                    showCancelButton: true,
                    confirmButtonText: "تایید",
                    cancelButtonText: "لغو",
                    inputValidator: (value) => {
                        return new Promise((resolve) => {
                            if (value == '') {
                                resolve('یک گزینه را انتخاب کنید.')
                            } else {
                                resolve()
                            }
                        })
                    }
                }).then(function (result) {
                    if (result.value) {
                        let model = {
                            ProductIds: selectedRows,
                            CategoryId: result.value
                        };
                        $.ajax({
                            url: '@Url.Content("~/Staff/Product_AssignTag")',
                            type: "POST",
                            data: model,
                            contentType: 'application/x-www-form-urlencoded',
                            success: function (data) {

                                if (data.success) {
                                    var grid = $("#grid").data("kendoGrid");
                                    grid.clearSelection();
                                    grid.dataSource.read();
                                    swal.fire("عملیات با موفقیت انجام شد", "", "success");
                                }
                                else {
                                    swal.fire(data.message, "", "warning");
                                }
                            },
                            error: handleAjaxError
                        });
                    }
                });
            });

        }


        function moveToCategory() {
            if (!checkSelectedRows())
                return;

            $.get('@Url.Content("~/Staff/Categories_List/")', function (data, status) {
                console.log(data);
                var categories = {}
                for (var i = 0; i < data.length; i++) {
                    categories[data[i].Id] = data[i].Title;
                }

                Swal.fire({
                    title: 'انتخاب دسته',
                    input: 'select',
                    inputOptions: {
                        categories
                    },
                    inputPlaceholder: 'انتخاب کنید',
                    showCancelButton: true,
                    confirmButtonText: "تایید",
                    cancelButtonText: "لغو",
                    inputValidator: (value) => {
                        return new Promise((resolve) => {
                            if (value == '') {
                                resolve('یک گزینه را انتخاب کنید.')
                            } else {
                                resolve()
                            }
                        })
                    }
                }).then(function (result) {
                    if (result.value) {
                        let model = {
                            ProductIds: selectedRows,
                            CategoryId: result.value
                        };
                        $.ajax({
                            url: '@Url.Content("~/Staff/Product_Change_Category/")',
                            type: "POST",
                            data: model,
                            contentType: 'application/x-www-form-urlencoded',
                            success: function (data) {

                                if (data.success) {
                                    var grid = $("#grid").data("kendoGrid");
                                    grid.dataSource.read();
                                    swal.fire("عملیات با موفقیت انجام شد", "", "success");
                                    grid.clearSelection();
                                }
                                else {
                                    swal.fire(data.message, "", "warning");
                                }
                            },
                            error: function (xhr) {
                                swal.fire("خطایی  اتفاق افتاده است", "", "warning");
                            }
                        });
                    }
                });
            });

        }

        function handleAjaxError(xhr) {
            try {
                var obj = JSON.parse(xhr.responseText);
                if (obj.message || obj.msg) {
                    swal.fire(obj.message || obj.msg, "", "error");
                }
            }
            catch { }
            finally {
                $.unblockUI();
            }
        }
    </script>
}
