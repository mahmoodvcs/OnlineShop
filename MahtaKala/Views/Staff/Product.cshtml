@model MahtaKala.Models.ProductModels.EditProductModel
@{
    ViewData["TitlNewtonsoft.Json.JsonSerializerNewtonsoft.Json.JsonSerializere"] = ViewData["Title"];
    Layout = "~/Views/Shared/_Staff.cshtml";
}
@if (ViewBag.IsPostback != null && ViewBag.IsPostback)
{
    <script>
        Swal.fire({
            position: 'top-end',
            icon: 'success',
            title: 'محصول ذخیره شد.',
            showConfirmButton: false,
            timer: 1500
        })
    </script>
}
@if (ViewBag.ErrorMessage != null)
{
    <script>
        Swal.fire({
            icon: 'error',
            title: '@ViewBag.ErrorMessage',
        })
    </script>
}
<div class="card card-custom gutter-b example example-compact">
    @using (Html.BeginForm("Product", "Staff", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form" }))
    {
        @Html.AntiForgeryToken()
        <input type="hidden" id="Id" name="Id" value="@Model.Id" />
        @Html.HiddenFor(a => a.Thubmnail)
        @Html.HiddenFor(a => a.ImageList)
        <div class="card-header">
            <div class="row">
                <div class="col-lg-6">
                </div>
                <div class="col-lg-6" style="text-align:left;">
                    <a href="@Url.Content("~/Staff/ProductList")" class="btn btn-default m-btn m-btn--custom m-btn--icon">
                        <span>
                            <i class="fa fa-list"></i>
                            <span>
                                برگشت به لیست
                            </span>
                        </span>
                    </a>
                    <a href="@Url.Content("~/Staff/Product")" class="btn btn-info m-btn m-btn--custom m-btn--icon">
                        <span>
                            <i class="fa fa-plus"></i>
                            <span>
                                جدید
                            </span>
                        </span>
                    </a>
                    <button type="submit" class="btn btn-success m-btn m-btn--custom m-btn--icon" onclick="beforeSave();">
                        <span>
                            <i class="fa fa-calendar-check-o"></i>
                            <span>
                                ذخیره
                            </span>
                        </span>
                    </button>

                </div>
            </div>
        </div>

        <div class="card-body">
            <div class="form-group row">
                <div class="col-lg-6">
                    <label>
                        عنوان:
                    </label>
                    @Html.TextBoxFor(a => a.Title, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-3">
                    <label>
                        دسته بندی:
                    </label>
                    <div class="k-content">
                        <input type="hidden" name="CategoryIds" id="CategoryIds" />
                        @(Html.Kendo().DropDownTree()
                .Name("CategoryIdsTree")
                .DataTextField("title")
                .DataValueField("id")
                .ValuePrimitive(true)
                .Filter(FilterType.Contains)
                //.Items(ad=>
                //{
                //    foreach (var ca in Model.ProductCategories)
                //    {
                //        ad.Add().Value(ca.CategoryId.ToString()).Text(ca.Category.Title);
                //    }
                //})
                .Checkboxes(conf =>
                {
                    conf.CheckChildren(false);
                })
                //.BindTo<Category>((List<Category>)ViewBag.Categories, (item,cat)=>{
                //    item.Checked = Model.ProductCategories.Any(c => c.CategoryId == cat.Id);
                //    item.Id = cat.Id.ToString();
                //    item.Text = cat.Title;
                //    item.HasChildren = cat.Children.Any();
                //})
                .DataSource(source =>
                {
                    source.Read(read => { read.Action("GetCategories", "Staff"); })
                    .Model(m => m.Id("id"));
                })
                //.LoadOnDemand()
                .Value(Model.ProductCategories.Select(c=>c.CategoryId))
                .HtmlAttributes(new { style = "width: 100%" })
                        )
                    </div>
                </div>
                <div class="col-lg-3">
                    <label>
                        برند:
                    </label>
                    <div class="k-content">
                        @(Html.Kendo().DropDownList()
							.Name("BrandId")
							.Value(Model.BrandId.ToString())
							.DataTextField("name")
							.DataValueField("id")
							.DataSource(source =>
							{
								source.Read(read => { read.Action("GetBrands", "Repo"); });
							})
							.HtmlAttributes(new { style = "width: 100%" })
							.OptionLabel("...انتخاب برند....")
                        )
                        @Html.ValidationMessageFor(model => model.BrandId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-lg-3">
                    <label>
                        کد محصول:
                    </label>
                    @Html.TextBoxFor(a => a.Code, new { @class = "form-control" })
                    @Html.ValidationMessageFor(a => a.Code, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-3">
                    <label>
                        قیمت (واحد):
                    </label>
                    @Html.TextBoxFor(a => a.RawPrice, new { @class = "form-control", @type = "number", onchange="UpdatePriceValues()" })
                    @Html.ValidationMessageFor(a => a.RawPrice, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-3">
                    <label>
                        قیمت بعد از تخفیف (واحد):
                    </label>
                    @Html.TextBoxFor(a => a.RawDiscountPrice, new { @class = "form-control", @type = "number", onchange = "UpdatePriceValues()" })
                    @Html.ValidationMessageFor(a => a.RawDiscountPrice, "", new { @class = "text-danger" })
                </div>
				<div class="col-lg-3">
					<lable>
						ضریب قیمت:
					</lable>
					@Html.TextBoxFor(a => a.PriceCoefficient, new { @class = "form-control", @type = "number", onchange = "UpdatePriceValues()" })
					<label>
						قیمت نهایی:
					</label>
					@*@Html.DisplayTextFor(a => a.FinalDiscountedPrice)*@
					@Html.TextBoxFor(a => a.FinalDiscountedPrice, new { @class = "form-control", @type = "number", @disabled = "disabled" })
				</div>
				<div class="col-lg-3">
					<label>
						فروشنده:
					</label>
					@*@(Html.Kendo().DropDownList()//DropDownListFor(a=>a.SellerId)
		.Name("SellerId")
		.Value(Model.SellerId.ToString())
		.DataTextField("Name").DataValueField("Id")
		//.DataSource(ds=>ds.Read("Sellers","Repo"))
		.DataSource(source =>
		{
			source.Read(read => { read.Action("Sellers", "Repo"); });
		})
		.HtmlAttributes(new { @class = "form-control" })
		.OptionLabel("...انتخاب فروشنده..."))*@
					<div class="k-content">
                        @(Html.Kendo().DropDownListFor(m => m.SellerIdNotNull)
                        .DataTextField("Name")
                        .DataValueField("Id")
                        .DataSource(source => source.Read("Sellers", "Repo"))
                        .HtmlAttributes(new { @class = "form-control" })
                        .OptionLabel("...انتخاب فروشنده...")
                        )
                        @Html.ValidationMessageFor(model => model.SellerIdNotNull, "", new { @class = "text-danger" })
						@*@(Html.Kendo().DropDownList()
							.Name("SellerId")
							.Value(Model.SellerId.ToString())
							.DataTextField("Name")
							.DataValueField("Id")
							.DataSource(source => source.Read("Sellers", "Repo"))
							//{
							//	source.Read(read => { read.Action("Sellers", "Repo"); });
							//})
							.HtmlAttributes(new { style = "width: 100%" })
						//.OptionLabel("...انتخاب فروشنده....")
                        )*@
						@*@Html.ValidationMessageFor(model => model.SellerId, "", new { @class = "text-danger" })*@
					</div>
				</div>
            </div>
            <div class="form-group row">
                <div class="col-lg-3">
                    <label>موجودی:</label>
                    @(Html.EditorFor( a=> a.Quantity, new { htmlAttributes = new { @class = "form-control" } }))
                </div>
                <div class="col-lg-3">
                    <label>وضعیت:</label>
                    @(Html.EnumCombo<ProductStatus>("Status", Model.Status))
                </div>
                <div class="col-lg-3">
                    <label>
                        منتشر شده
                    </label>
                    @Html.CheckBoxFor(a => a.Published, new { @class = "form-control" })
                </div>
                <div class="col-lg-3">
                    <label>تگ ها</label>
                    @(Html.Kendo().MultiSelect().Name("TagIds")
                        .DataSource(ds=>ds.Read("Tags","Repo"))
                        .DataValueField("Id").DataTextField("Name")
                        .Value(Model.TagIds)
                        )
                </div>
            </div>
            <div class="form-group row">
                <div class="col-lg-6">
                    <label>محدودیت های خرید</label>
                    @(Html.Kendo().MultiSelect().Name("LimitationIds")
                        .DataSource(ds=>ds.Read("BuyLimitations", "Repo"))
                        .DataValueField("Id").DataTextField("Name")
                        .Value(Model.LimitationIds)
                        )
                </div>
                <div class="col-lg-3">
                    <label>@Html.LabelFor(a => a.MinBuyQuota)</label>
                    @Html.EditorFor(a => a.MinBuyQuota, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="col-lg-3">
                    <label>@Html.LabelFor(a => a.MaxBuyQuota)</label>
                    @Html.EditorFor(a => a.MaxBuyQuota, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                <div class="col-lg-3">
                    <label>@Html.LabelFor(a => a.BuyQuotaDays)  (روز)</label>
                    @Html.EditorFor(a => a.BuyQuotaDays, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
            <div class="form-group row">
                <div class="col-lg-12">
                    <label>
                        عکس کوچک اول @(Model.Id == 0 ? "(برای آپلود عکس ابتدا باید محصول را ذخیره نمایید.)" : ""):
                    </label>
                    <div class="k-content @(Model.Id == 0 ? "disabled-content" : "")">
                        @(Html.Kendo().Upload()
                    .Name("thumbnails")
                    .Multiple(false)
                    .Async(a => a
                        .Save("SaveThumbnail", "Staff")
                        .AutoUpload(true)
                    )
                    .Events(e => e
                        .Upload("onUpload")
                        .Success("onThumbSuccess")
                    )
                    .Validation(validation => validation.AllowedExtensions(new string[] { ".jpg", ".jpeg", ".png", ".bmp" }))
                        )
                    </div>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-lg-12">
                    <img id="thumb-img" src="@(Model.Thubmnail)" style="max-width:200px; max-height:200px;" />
                </div>
            </div>

            <div class="form-group row">
                <div class="col-lg-12">
                    <label>
                        عکس ها @(Model.Id == 0 ? "(برای آپلود عکس ابتدا باید محصول را ذخیره نمایید.)" : "") :
                    </label>
                    <div class="k-content @(Model.Id == 0 ? "disabled-content" : "")">
                        @(Html.Kendo().Upload()
                    .Name("images")
                    .Multiple(true)
                    .Async(a => a
                        .Save("SaveImages", "Staff")
                        .AutoUpload(true)
                        .Batch(true)
                    )
                    .Events(e => e
                        .Upload("onUpload")
                        .Success("onSuccess")
                    )
                    .Validation(validation => validation.AllowedExtensions(new string[] { ".jpg", ".jpeg", ".png", ".bmp" }))
                        )
                    </div>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-lg-12">
                    <div id="productImagesListView"></div>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-lg-12">
                    <label>
                        توضیحات:
                    </label>
                    @(Html.Kendo().Editor()
                        .Name("editor")
                        .HtmlAttributes(new { style = "width: 100%; height:300px" })
                        .Tools(tools => tools
                            .Clear()
                            .Bold().Italic().Underline()
                            .JustifyLeft().JustifyCenter().JustifyRight()
                            .InsertUnorderedList().InsertOrderedList()
                            .Outdent().Indent()
                            .CreateLink().Unlink()
                            .InsertImage()
                            .TableEditing()
                            .FontName()
                            .FontSize()
                            .ForeColor().BackColor()
                        )
                        .ImageBrowser(imageBrowser => imageBrowser
                            .Image(Url.Action("Product", "Image")+"?id=" + Model.Id + "&name={0}")
                            .Read("Read", "ProductEditorImageBrowser", new { Id = Model.Id })
                            .Destroy("Destroy", "ProductEditorImageBrowser", new { Id = Model.Id })
                            .Upload("Upload", "ProductEditorImageBrowser", new { Id = Model.Id })
                            .Thumbnail("Thumbnail", "ProductEditorImageBrowser", new { Id = Model.Id })
                        )
                        .Value(Model.Description)
                    )
                </div>
            </div>
            <div class="form-group row">
                <div class="col-lg-12">
                    <label>مشخصات:</label>
                    <div id="productPropertiesGrid"></div>
                    <input type="hidden" name="Properties" id="Properties" />
                </div>
            </div>
            @*<div class="form-group row">
                <div class="col-lg-12">
                        <div id="characteristicsGrid"></div>
                    <input type="hidden" name="characteristicsJson" id="characteristicsJson"/>
                    </div>
                </div>*@
        </div>
    }
</div>
<script>
    var propertiesDataSource;
    var modelId = $("#Id").val();
    $(function () {

        var properties = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Properties));
        propertiesDataSource =
            new kendo.data.DataSource({
                data: properties,
                pageSize: 10
            });

        $("#productPropertiesGrid").kendoGrid({
            dataSource: propertiesDataSource,
            columns: [
                { field: "Key", title: "نام" },
                { field: "Value", title: "مقدار" },
                { command: ["edit", "destroy"] }
            ],
            toolbar: ["create"],
            scrollable: false,
            pageable: true,
            sortable: true,
            groupable: true,
            //filterable: true,
            editable: "inline",
            save: function () {
                this.refresh();
            }
        });
        loadImageList(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ImageList)));
    });
    @*var characteristicsDataSource;

    $(function () {

        var pChars = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Characteristics));
        var cChars = !pChars ? [] : pChars.map(function (c) {
            var o = {};
            o.Name = c.Name;
            for (var i = 0; i < c.Values.length; i++) {
                o['Value' + i] = c.Values[i];
            }
            for (var i = c.Values.length; i < 10; i++) {
                o['Value' + i] = null;
            }
            return o;
        });

        characteristicsDataSource =
            new kendo.data.DataSource({
                data: cChars,
                pageSize: 10
            });

        $("#characteristicsGrid").kendoGrid({
            dataSource: characteristicsDataSource,
            columns: [
                { field: "Name", title: "نام خصوصیت" },
                { field: "Value0", title: "مقدار 1" },
                { field: "Value1", title: "مقدار 2" },
                { field: "Value2", title: "مقدار 3" },
                { field: "Value3", title: "مقدار 4" },
                { field: "Value4", title: "مقدار 5" },
                { field: "Value5", title: "مقدار 6" },
                { field: "Value6", title: "مقدار 7" },
                { field: "Value7", title: "مقدار 8" },
                { field: "Value8", title: "مقدار 9" },
                { field: "Value9", title: "مقدار 10" },
                { command: ["edit", "destroy"] }
            ],
            toolbar: ["create"],
            scrollable: false,
            pageable: true,
            sortable: true,
            groupable: true,
            //filterable: true,
            editable: "inline",
            save: function () {
                this.refresh();
            }
        });
        loadImageList(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.ImageList)));
    });
 *@

    function beforeSave() {
        $("#Properties").val(JSON.stringify(propertiesDataSource.data()));
        var val = JSON.stringify($("#CategoryIdsTree").data("kendoDropDownTree").value());//.map(function (v) { return v.id }));
        $("#CategoryIds").val(val);
    }
    function onUpload(e) {
        e.data = { ID: modelId };
    }
    function onSuccess(e) {
        images = jQuery.parseJSON(e.XMLHttpRequest.responseText);
        loadImageList(images);
    }
    function loadImageList(images) {
        if (!images)
            return;
        $("#ImageList").val(images);
        data = [];
        var i;
        for (i = 0; i < images.length; i++) {
            data.push({
                src: getImage(images[i]),
                image: images[i]
            });
        }
        var dataSource = new kendo.data.DataSource({
            data: data
        });

        $("#pager").kendoPager({
            dataSource: dataSource
        });

        $("#productImagesListView").kendoListView({
            dataSource: dataSource,
            template: kendo.template($("#product-image-template").html())
        });
    }
    function onThumbSuccess(e) {
        var imgId = jQuery.parseJSON(e.XMLHttpRequest.responseText);
        $("#Thubmnail").val(imgId);
        var _img = document.getElementById('thumb-img');
        _img.src = imgId;
    }
    function getImage(imgId) {
        return "@Html.Raw(ViewBag.ImagePathFormat)".replace(/{(0)}/g, imgId);
        //return '@Url.Action("Product", "Image")?id=' + modelId + '&name=' + imgId;
    }
    function deleteImage(imgId) {
        console.log(imgId);
        Swal.fire({
            title: "آیا مطمئن به حذف فایل هستید؟",
            text: "در صورت تایید دیگر قابل بازگشت نخواهد بود.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "بله",
            cancelButtonText: "خیر",
            reverseButtons: true
        }).then(function (result) {
            if (result.value) {
                $.post("@Url.Action("DeleteImage", "Staff")",
                    {
                        Id: modelId,
                        fileName: imgId
                    },
                    function (images) {
                        loadImageList(images);
                });
                // result.dismiss can be "cancel", "overlay",
                // "close", and "timer"
            } else if (result.dismiss === "cancel") {
                //Swal.fire(
                //    "Cancelled",
                //    "Your imaginary file is safe :)",
                //    "error"
                //)
            }
        });
    }

    function UpdatePriceValues() {
        var modelId = $('#Id').val();
        var isEdit = true;
        if (isNaN(modelId) || modelId === 0)
            isEdit = false;
        var newPriceCoefficient = $('#PriceCoefficient').val();
        if (isNaN(newPriceCoefficient) || newPriceCoefficient == undefined || newPriceCoefficient == '') {
            $('#PriceCoefficient').val(1);
            newPriceCoefficient = 1;
        }
        if (newPriceCoefficient <= 0) {
            alert('مقدار ضریب قیمت باید بزرگتر یا مساوی 1 باشد.');
            $('#PriceCoefficient').val(1);
            newPriceCoefficient = 1;
        }
        var rawDiscountedPrice = $('#RawDiscountPrice').val();
		if (isNaN(rawDiscountedPrice) || rawDiscountedPrice == undefined || rawDiscountedPrice <= 0) {
			rawDiscountedPrice = $('#RawPrice').val();
			if (!isEdit && !isNaN(rawDiscountedPrice)) {
				$('#RawDiscountPrice').val(rawDiscountedPrice);
			}
		}
        if (isNaN(rawDiscountedPrice) || rawDiscountedPrice == undefined || rawDiscountedPrice <= 0) {
            //alert('لطفاً قیمت کالا را تعیین نمایید.');
            $('#FinalDiscountedPrice').val(0);
            return;
        }
        $('#FinalDiscountedPrice').val(rawDiscountedPrice * newPriceCoefficient);
		$('#FinalDiscountedPrice').css('border-color', 'red');
    }
</script>

<script type="text/x-kendo-tmpl" id="product-image-template">
    <div class="product">
        <img src="#:src#" />
        <p>
            <button type="button" class="btn btn-danger" onclick="deleteImage('#:image#')">
                <span aria-hidden="true">&times;</span>
            </button>
        </p>
    </div>
</script>

<style>

    #productImagesListView {
        padding: 10px 5px;
        margin-bottom: -1px;
        min-height: 200px;
        /* Avoid cutout if font or line is bigger */
        font: inherit;
    }

    .product {
        float: left;
        position: relative;
        width: 111px;
        height: 170px;
        margin: 0 5px;
        padding: 0;
    }

        .product img {
            width: 110px;
            height: 110px;
        }

        .product p {
            visibility: hidden;
        }

        .product:hover p {
            visibility: visible;
            position: absolute;
            width: 110px;
            height: 110px;
            top: 0;
            margin: 0;
            padding: 0;
            line-height: 110px;
            vertical-align: middle;
            text-align: center;
            color: #fff;
            background-color: rgba(0,0,0,0.75);
            transition: background .2s linear, color .2s linear;
            -moz-transition: background .2s linear, color .2s linear;
            -webkit-transition: background .2s linear, color .2s linear;
            -o-transition: background .2s linear, color .2s linear;
        }

    .k-listview:after {
        content: ".";
        display: block;
        height: 0;
        clear: both;
        visibility: hidden;
    }
</style>
